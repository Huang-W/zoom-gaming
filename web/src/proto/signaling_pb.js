/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.RTCIceCandidateInit', null, global);
goog.exportSymbol('proto.RTCIceServer', null, global);
goog.exportSymbol('proto.SessionDescription', null, global);
goog.exportSymbol('proto.SessionDescription.SDPType', null, global);
goog.exportSymbol('proto.SignalingEvent', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SignalingEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.SignalingEvent.oneofGroups_);
};
goog.inherits(proto.SignalingEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SignalingEvent.displayName = 'proto.SignalingEvent';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.SignalingEvent.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.SignalingEvent.EventCase = {
  EVENT_NOT_SET: 0,
  RTC_ICE_SERVER: 1,
  SESSION_DESCRIPTION: 2,
  RTC_ICE_CANDIDATE_INIT: 3
};

/**
 * @return {proto.SignalingEvent.EventCase}
 */
proto.SignalingEvent.prototype.getEventCase = function() {
  return /** @type {proto.SignalingEvent.EventCase} */(jspb.Message.computeOneofCase(this, proto.SignalingEvent.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SignalingEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.SignalingEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SignalingEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SignalingEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    rtcIceServer: (f = msg.getRtcIceServer()) && proto.RTCIceServer.toObject(includeInstance, f),
    sessionDescription: (f = msg.getSessionDescription()) && proto.SessionDescription.toObject(includeInstance, f),
    rtcIceCandidateInit: (f = msg.getRtcIceCandidateInit()) && proto.RTCIceCandidateInit.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SignalingEvent}
 */
proto.SignalingEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SignalingEvent;
  return proto.SignalingEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SignalingEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SignalingEvent}
 */
proto.SignalingEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.RTCIceServer;
      reader.readMessage(value,proto.RTCIceServer.deserializeBinaryFromReader);
      msg.setRtcIceServer(value);
      break;
    case 2:
      var value = new proto.SessionDescription;
      reader.readMessage(value,proto.SessionDescription.deserializeBinaryFromReader);
      msg.setSessionDescription(value);
      break;
    case 3:
      var value = new proto.RTCIceCandidateInit;
      reader.readMessage(value,proto.RTCIceCandidateInit.deserializeBinaryFromReader);
      msg.setRtcIceCandidateInit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SignalingEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SignalingEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SignalingEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SignalingEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRtcIceServer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.RTCIceServer.serializeBinaryToWriter
    );
  }
  f = message.getSessionDescription();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.SessionDescription.serializeBinaryToWriter
    );
  }
  f = message.getRtcIceCandidateInit();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.RTCIceCandidateInit.serializeBinaryToWriter
    );
  }
};


/**
 * optional RTCIceServer rtc_ice_server = 1;
 * @return {?proto.RTCIceServer}
 */
proto.SignalingEvent.prototype.getRtcIceServer = function() {
  return /** @type{?proto.RTCIceServer} */ (
    jspb.Message.getWrapperField(this, proto.RTCIceServer, 1));
};


/** @param {?proto.RTCIceServer|undefined} value */
proto.SignalingEvent.prototype.setRtcIceServer = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.SignalingEvent.oneofGroups_[0], value);
};


proto.SignalingEvent.prototype.clearRtcIceServer = function() {
  this.setRtcIceServer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SignalingEvent.prototype.hasRtcIceServer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SessionDescription session_description = 2;
 * @return {?proto.SessionDescription}
 */
proto.SignalingEvent.prototype.getSessionDescription = function() {
  return /** @type{?proto.SessionDescription} */ (
    jspb.Message.getWrapperField(this, proto.SessionDescription, 2));
};


/** @param {?proto.SessionDescription|undefined} value */
proto.SignalingEvent.prototype.setSessionDescription = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.SignalingEvent.oneofGroups_[0], value);
};


proto.SignalingEvent.prototype.clearSessionDescription = function() {
  this.setSessionDescription(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SignalingEvent.prototype.hasSessionDescription = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional RTCIceCandidateInit rtc_ice_candidate_init = 3;
 * @return {?proto.RTCIceCandidateInit}
 */
proto.SignalingEvent.prototype.getRtcIceCandidateInit = function() {
  return /** @type{?proto.RTCIceCandidateInit} */ (
    jspb.Message.getWrapperField(this, proto.RTCIceCandidateInit, 3));
};


/** @param {?proto.RTCIceCandidateInit|undefined} value */
proto.SignalingEvent.prototype.setRtcIceCandidateInit = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.SignalingEvent.oneofGroups_[0], value);
};


proto.SignalingEvent.prototype.clearRtcIceCandidateInit = function() {
  this.setRtcIceCandidateInit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SignalingEvent.prototype.hasRtcIceCandidateInit = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RTCIceServer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.RTCIceServer.repeatedFields_, null);
};
goog.inherits(proto.RTCIceServer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RTCIceServer.displayName = 'proto.RTCIceServer';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.RTCIceServer.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RTCIceServer.prototype.toObject = function(opt_includeInstance) {
  return proto.RTCIceServer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RTCIceServer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RTCIceServer.toObject = function(includeInstance, msg) {
  var f, obj = {
    urlsList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RTCIceServer}
 */
proto.RTCIceServer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RTCIceServer;
  return proto.RTCIceServer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RTCIceServer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RTCIceServer}
 */
proto.RTCIceServer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addUrls(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RTCIceServer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RTCIceServer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RTCIceServer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RTCIceServer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUrlsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string urls = 1;
 * @return {!Array<string>}
 */
proto.RTCIceServer.prototype.getUrlsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<string>} value */
proto.RTCIceServer.prototype.setUrlsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.RTCIceServer.prototype.addUrls = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.RTCIceServer.prototype.clearUrlsList = function() {
  this.setUrlsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SessionDescription = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SessionDescription, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SessionDescription.displayName = 'proto.SessionDescription';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SessionDescription.prototype.toObject = function(opt_includeInstance) {
  return proto.SessionDescription.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SessionDescription} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SessionDescription.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    sdp: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SessionDescription}
 */
proto.SessionDescription.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SessionDescription;
  return proto.SessionDescription.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SessionDescription} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SessionDescription}
 */
proto.SessionDescription.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.SessionDescription.SDPType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSdp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SessionDescription.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SessionDescription.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SessionDescription} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SessionDescription.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getSdp();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.SessionDescription.SDPType = {
  SDP_TYPE_UNSPECIFIED: 0,
  OFFER: 1,
  SDP_TYPE_OFFER: 1,
  PRANSWER: 2,
  SDP_TYPE_PRANSWER: 2,
  ANSWER: 3,
  SDP_TYPE_ANSWER: 3,
  ROLLBACK: 4,
  SDP_TYPE_ROLLBACK: 4
};

/**
 * optional SDPType type = 1;
 * @return {!proto.SessionDescription.SDPType}
 */
proto.SessionDescription.prototype.getType = function() {
  return /** @type {!proto.SessionDescription.SDPType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.SessionDescription.SDPType} value */
proto.SessionDescription.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string sdp = 2;
 * @return {string}
 */
proto.SessionDescription.prototype.getSdp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.SessionDescription.prototype.setSdp = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RTCIceCandidateInit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RTCIceCandidateInit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RTCIceCandidateInit.displayName = 'proto.RTCIceCandidateInit';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RTCIceCandidateInit.prototype.toObject = function(opt_includeInstance) {
  return proto.RTCIceCandidateInit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RTCIceCandidateInit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RTCIceCandidateInit.toObject = function(includeInstance, msg) {
  var f, obj = {
    candidate: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sdpMid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    sdpMLineIndex: jspb.Message.getFieldWithDefault(msg, 3, 0),
    usernameFragment: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RTCIceCandidateInit}
 */
proto.RTCIceCandidateInit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RTCIceCandidateInit;
  return proto.RTCIceCandidateInit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RTCIceCandidateInit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RTCIceCandidateInit}
 */
proto.RTCIceCandidateInit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCandidate(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSdpMid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSdpMLineIndex(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsernameFragment(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RTCIceCandidateInit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RTCIceCandidateInit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RTCIceCandidateInit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RTCIceCandidateInit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCandidate();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSdpMid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSdpMLineIndex();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getUsernameFragment();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string candidate = 1;
 * @return {string}
 */
proto.RTCIceCandidateInit.prototype.getCandidate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.RTCIceCandidateInit.prototype.setCandidate = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string sdp_mid = 2;
 * @return {string}
 */
proto.RTCIceCandidateInit.prototype.getSdpMid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.RTCIceCandidateInit.prototype.setSdpMid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 sdp_m_line_index = 3;
 * @return {number}
 */
proto.RTCIceCandidateInit.prototype.getSdpMLineIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.RTCIceCandidateInit.prototype.setSdpMLineIndex = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string username_fragment = 4;
 * @return {string}
 */
proto.RTCIceCandidateInit.prototype.getUsernameFragment = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.RTCIceCandidateInit.prototype.setUsernameFragment = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


goog.object.extend(exports, proto);
